#/bin/bash

function collect_sys_info() {
    drv_name=$1
    
    echo ${drv_name} | grep /dev/
    if [[ $? -ne 0 ]]; then local_drv=/dev/${drv_name}; else local_drv=drv_name; drv_name=${drv_name#/dev/}; fi

    nvme_cli=nvme
    smart_log_add=" intel "
    if [[ "${drv_name::4}" == "sfdv" ]]; then nvme_cli=sfx-nvme; smart_log_add=" sfx "; fi
    nvme_list=`${nvme_cli} list`
    id_ctrl=`${nvme_cli} id-ctrl ${local_drv}`
    smart_log=`${nvme_cli} smart-log ${local_drv}`
    smart_log_add=`${nvme_cli} ${smart_log_add} smart-log-add ${local_drv}`
    
    echo "${nvme_list}"
    echo ""
    echo "${id_ctrl}"
    echo ""
    echo "${smart_log}"
    echo ""
    echo "${smart_log_add}"
    echo ""
    echo "`lscpu`"
    echo ""
    echo "`grep MHz /proc/cpuinfo`"
    echo ""
    echo "`free -m`"
}


function iostat_to_csv() {
    data_dir=$1
    if [[ ! -d ${data_dir} ]]; then return 1; fi

    iofields="1,4-9,14"
    cpufields="1-2,4"
    for fiostat in `ls ${data_dir}/*.iostat`
    do
        barename=${fiostat/*\/}; barename=${barename/.iostat}
        grep -m1 Device $fiostat | sed -r "s/\s+/,/g" | cut -d, -f ${iofields} > ${data_dir}/${barename}.io
        grep -e sfd -e nvme $fiostat | sed -r "s/\s+/,/g"  | cut -d, -f ${iofields} >> ${data_dir}/${barename}.io

        grep -m1 avg-cpu $fiostat | sed -r "s/\s+/,/g" | cut -d, -f ${cpufields} > ${data_dir}/${barename}.cpu
        grep -A1 avg-cpu $fiostat | grep -v \- | sed -r "s/\s+/,/g" | cut -d, -f ${cpufields} >> ${data_dir}/${barename}.cpu
        
        paste -d, ${data_dir}/${barename}.io ${data_dir}/${barename}.cpu > ${data_dir}/${barename}.csv
        rm -f ${data_dir}/${barename}.io ${data_dir}/${barename}.cpu
    done
}

function fio_to_csv() {
    data_dir=$1
    disk=$2
    if [[ ! -d ${data_dir} ]]; then return 1; fi

    header=0
    for f in `ls -tr ${data_dir}/${disk}*.fio`
    do
        disk_name=${f/*\/}; disk_name=${disk_name/_*}
        io_pattern=${data_dir}/${disk_name}_io_pattern.csv
        bw_iops_csv=${data_dir}/${disk_name}_bw_iops.csv
        lat_csv=${data_dir}/${disk_name}_lat.csv
        report=${data_dir}/${disk_name}_summary.csv
        if [[ ${header} -eq 0 ]]
        then
            header=1
            echo "pattern" > ${io_pattern}
            echo "I/O,KIOPS,BW (MiB/s)" > ${bw_iops_csv}
            echo "lat unit,min,max,avg,stdev" > ${lat_csv}
        fi
        grep -e pid= ${f} | sed -r -e "s/(randrw.*):.*\(.*/\1\n/g" -e "s/(.*):.*\(.*/\1/g" >> ${io_pattern}
        grep -e BW= ${f} | sed -r -e "s/\s*(.*):\s*IOPS=([0-9\.k]+),\s*BW=([0-9\.]+MiB).*/\1,\2,\3/g" >> ${bw_iops_csv}
        grep -e "\slat\s.*avg=" ${f} | sed -r -e "s/\s+(lat\s.*):\smin=\s*([0-9]+),\s+max=\s*([0-9]+),\s+avg=\s*([0-9\.]+),\sstdev=\s*([0-9\.]+).*/\1,\2,\3,\4,\5/g" >> ${lat_csv} 

    done
    paste -d, ${io_pattern} ${bw_iops_csv} ${lat_csv} > ${report}
    rm -f ${io_pattern} ${bw_iops_csv} ${lat_csv}
}

function consolidate_summary() {
    data_dir=$1
    out_dir=$2
    if [[ ! -d ${data_dir} ]]; then return 1; fi
    if [[ ! -d ${out_dir} ]]; then out_dir=${data_dir}; fi

    header_collcted=0
    headers=${data_dir}/headers.tmp
    suffix=_summary.csv
    for f in `ls ${data_dir}/*${suffix} | sort -V`
    do
        disk_name=${f/*\/}; disk_name=${disk_name/_*}
        result=${data_dir}/${disk_name}.result
        if [[ ${header_collcted} -eq 0 ]]
        then
            header_collcted=1
            header_txt=`cat $f | cut -d, -f1,2`
            echo "KIOPS"          > ${headers}
            echo "${header_txt}" >> ${headers}
            echo ""              >> ${headers}
            echo "BW (MiB/s)"    >> ${headers}
            echo "${header_txt}" >> ${headers}
        fi

        echo "" > ${result}
        echo ${disk_name} >> ${result}
        cat $f | grep -v IOPS | cut -d, -f 3 >> ${result}
        echo "" >> ${result}
        echo "" >> ${result}
        echo ${disk_name} >> ${result}
        cat $f | grep -v BW   | cut -d, -f 4 >> ${result}

        result_list="${result_list} ${result}"
    done

    paste -d, ${headers} ${result_list} > ${${out_dir}/result_summary.csv
    rm ${headers} ${result_list}
}